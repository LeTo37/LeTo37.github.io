---
layout: default
modal-id: 2
title: DC Motor Control
date: 2019-06-22
img: DC_Motor_Control.png
alt: image-alt
project-date: April 2014
description: <h2> Overview</h2> This project was to build and code an intelligent motor controller. The structure of the controller is such that it receives inputs from the client using a MATLAB user interface, which in return receives the results of the motor which is then plotted and displayed to the client. <br> The system is able to follow a reference trajectory, velocity or torque by spinning a brushed DC motor's shaft with an inertial load attached. This is achieved using two feedback control loops, implemented as a digital PID controllers which use values obtained from the encoder built in to the motor as well as from a current sensor. <br><br><h2>Video</h2>Below is a video showcasing the DC Motor being controlled<span>&#58;</span> <div align="center"> <iframe width="600" height="345" src="https://www.youtube-nocookie.com/embed/FJjh2uwLuLQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe> </div> <br><br><h2>Software</h2>All of the software can be be found <a href=https://github.com/LeTo37/DC-Motor-Control>here.</a> <br>The two parts of this project are split into the DC motor control and the client interface.<br><br><ul><li> C code was used to program the PIC32MX795F512H microcontroller with an <a href=http://hades.mech.northwestern.edu/index.php/NU32>NU32</a> breakout board.</li><li>MATLAB code was used tot develop the client interface.</li></ul><br> The interface looks like this <span>&#58;</span> <p align="center"> <img src="img/portfolio/DCMotorClient.png" width="450"> </p> The above options presented to the client represent the capabilities of the controller.<br><br><h2>Hardware</h2> The hardware used in this project include:<br><br><ul><li> Brushed DC Motor with a plastic bar attached to the shaft as an inertial load.</li><li> An Encoder attached to the motor.</li><li> A PIC32MX795F512H microcontroller with an NU32 breakout board.</li><li> A dsPIC33FJ64MC802 micontroller used with a breakout board, programmed as a decoder.</li><li> A breakout board for the DRV8835 H-Bridge.</li><li> A breakout board for the MAX9918 current-sense amplifier.</li><li> An <a href=https://www.nscope.org/>nScope</a> digital oscilloscope was used for debugging.</li></ul> The circuitry was connected as follows<span>&#58;</span> <p align="center"> <img src="img/portfolio/DCMotorCircuit.png" width="450"> </p> <br><br><h2>Result</h2> The image below shows how the motor was able to track a cubic trajectory with an average error of only 1.1 degrees.<p align="center"> <img src="img/portfolio/DCMotorTrack.jpg" width="450"> </p>

---